{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16020\viewh8660\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc

\f0\i\b\fs24 \cf0 Tap Tap Adventure is based off Mozilla's BrowserQuest HTML5 game example
\i0\b0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	The game is composed of three pieces, client, server and the shared folder. Similarly to most MMORPG's a client connects to a server. The server connects to the redis-server database, which similarly to the SQL Databases holds tables for each individual character, for our further intentions we won't connect the forum and the game to prevent and exploits. The shared folder holds ID's for each specific entity, item, NPC, actions and events (Inventory, TalkToNPC). Currently the server connects to the database, most information such as player position, inventory, achievements unlocked and progress, and equipment we will need to implement guilds to the database so it can hold which player is in which guild. Before many improvements to the client, most things that are currently hosted on the database were formerly part of a localstorage JSON in the mozilla database. Currently, upon each login and reset, the localstorage is reseted to prevent any sort of character rollback.\
	
\i \ul Note: Before my improvements to the database, logging in from the same device allowed you to continue, however, when logging in from another computer or device that didn't hold the same localstorage, the character would be reseted
\i0  \
\ulnone 	Depending on the priority of the specific ID it should be handled server side, client side or both. For example, checkpoints are handled server side and client side as they are necessary for them to be written on the database. The client handles the player x and y position, sends a callback to the server and the server writes it to the redis database. To know if it belongs to the client, server or both, you must look in the map processing javascript file located in "gamefiles/tools/maps/processmap.js" the code in this file is quite easy to understand, however there are many things that may confuse you. The most notable and important part is processMap function, which handles which is which. Looking at the code you may notice the map enum handles the width, height, collisions, doors, checkpoints and pvpAreas. Because these are not given a specific modes unlike the rest, they are both server and client side. 
\i Going down you will notice the if statement indicating the mode is client. In the client, the plateau's aren't really necessary and will soon be removed from the tile-map as they cause some slight lag whilst moving and the music areas. 
\i0 On the server side, you can see the static entities and chests, the roaming areas (of the NPC's) and the chest areas. Just for a future reference, we must keep the important things on the server side, this way we avoid exploits. For example, PVPAreas should be server-side as they can be exploited client-side. Note that currently there could be a potential exploit. Note that the game is still in an unifinished state as we don't have everything necessary added, this includes the client exploits, which have to be fixed pronto as anyone can simply use a BrowserQuest modified client and enable PVP. There is one way to avoid this, considering the client simply stops loading upon an image missing, we could link an image somewhere safe, and use that to load the client, however this will be a very ghetto fix. Any ideas have to be put below.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i\b \cf0 \ul \ulc0 This will need some more documentation.
\i0\b0 \ulnone  \
\
\
\
\

\b\fs36 \ul Coding Conventions (Must Read): \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs24 \cf0 \ulnone As a developer of Tap Tap Adventure you must write clean, understandable code with various //comments explaining everything that you are doing, variables and constants should be given names accordingly. Using the following, it should give you a glimpse of the architecture of the game.\
"If" statements must be separated accordingly, like so:\
\
	
\b if (var a < 50) \{\
\
		doSomething();\
	\}\
\

\b0 Following the exact syntax, it must have the specific spaces, for each new nested 
\b if
\b0  statement, it must be one tab space in front of the previous like so: \
\
	
\b if (var a < 50) \{\
	\
		if (var b < 100) \{\
			\
			doSomethingElse();\
		\}\
		doSomething();\
	\}\

\b0 \
after declaring the if statement, there must be a line between it and the following method or whatever. Following the same syntax for everything else, including functions, the semicolons must be exactly one space from the ending of a parantheses, with that being said a basic example of the desired code would be:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 	for (var i = 5; i < 10; i +=  2) \{\
	\
	//Do a check of what i is\
		if (i !== 7) \{\
\
			log.info("Print out what you are doing.");\
		\}\
		\
		//checking player vanish\
		checkForPlayerVanish();\
	\}
\b0 \
\
Note that comments aren't necessarily to be used everywhere, however we could use log.info to do that.\
\

\b \ul Code on a line must not be longer than two lines, at all times try to maintain it under one line if possible.
\b0 \ulnone \
}