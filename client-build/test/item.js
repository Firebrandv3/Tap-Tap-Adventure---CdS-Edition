load_boilerplate=require("../../shared/js/boilerplate.js"),eval(load_boilerplate()),describe("Item",function(){var a,b=this;beforeEach(function(c){requirejs(["item"],function(d){a=d,b.item=new a(1,"testKind","type"),c()})}),before(function(){var a=sinon.stub(Types,"getKindAsString");a.withArgs("testKind").returns("testKind")}),describe(".init",function(){it("sets itemKind to the passed kind",function(){b.item.itemKind.should.equal("testKind")}),it("sets type to the passed type",function(){b.item.type.should.equal("type")}),it("sets wasDropped to false",function(){b.item.wasDropped.should.equal.false})}),describe("#hasShadow",function(){it("should return true",function(){b.item.hasShadow().should.be.true})}),describe("#onLoot",function(){var a,c;beforeEach(function(){a=sinon.stub(),c=sinon.spy()}),it("calls switchWeapon on passed player if type equals weapon",function(){a.switchWeapon=c,b.item.type="weapon",b.item.onLoot(a),c.calledWith("testKind").should.be.true}),it("calls armorloot_callback on passed player if type equals armor",function(){a.armorloot_callback=c,b.item.type="armor",b.item.onLoot(a),c.calledWith("testKind").should.be.true})}),describe("#getSpriteName",function(){it("should return 'item-' plus itemKind",function(){b.item.getSpriteName().should.equal("item-testKind")})}),describe("#getLootMessage",function(){it("should return lootMessage",function(){b.item.lootMessage="Loot message",b.item.getLootMessage().should.equal("Loot message")})})})